# -*- coding: utf-8 -*-
"""pixel 별 퍼스널컬러 분류 확인

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CHoe5WjvWdJeMKpY6Vl-gGzRqLvmRhXr

# 라이브러리 불러오기
"""

import cv2
from matplotlib import pyplot as plt
import numpy as np
from PIL import Image
import requests

"""# RGB 값을 이용한 픽셀 별 클래스 분류 확인"""

# 파일 불러오기
file_path = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/웜톤_jpg/공효진.jpg'

image = Image.open(file_path)
image_np = np.array(image)

image_np.shape

height, width, _ = image_np.shape

# RGB 값

spring_tone = [253.75, 153.55, 152]
summer_tone = [254, 291.25, 164.5]
fall_tone = [240.75, 199.25, 132.75]
winter_tone = [240, 201.5, 129.5]

# return: 'spring', 'summer', 'fall', 'winter', 'undefined'
def compute_cosine_sim(v1, v2):
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))

# vectorization
def classify_skin_type(pixel): # [216, 233, 243]
    v1 = compute_cosine_sim(pixel, spring_tone)
    v2 = compute_cosine_sim(pixel, summer_tone)
    v3 = compute_cosine_sim(pixel, fall_tone)
    v4 = compute_cosine_sim(pixel, winter_tone)

    _class = ['spring', 'summer', 'fall', 'winter'][np.argmax([v1, v2, v3, v4])]
    _distance = np.max([v1, v2, v3, v4])
    return _class,_distance

# 둘의 유사도 확인
# v1 = [216, 233, 243]
# v2 = [253.75, 153.55, 152]

# print(compute_cosine_sim(spring_tone, fall_tone))
# print(compute_cosine_sim(spring_tone, winter_tone))

from tqdm import tqdm

results = np.zeros_like(image_np, dtype='uint8') # 0-255
results_distance = np.zeros_like(image_np, dtype='float') # 0-255

color_map = {
    "spring": [255, 0, 0],
    "summer": [0, 255, 0],
    "fall": [0, 0, 255],
    "winter": [255, 255, 0],
    # "warm": [255, 0, 0],
    # "cool": [0, 0, 255],
    "undefined": [0, 0, 0],
}

for j in tqdm(range(height)):
    for i in range(width):
        current_pixel = image_np[j, i]
        cls, dist = classify_skin_type(current_pixel)
        results[j, i] = color_map[cls]
        results_distance[j, i] = dist

# 정량/정성
plt.imshow(results)

plt.imshow(image_np)

"""- 오잉, 공효진은 여름 쿨, 봄 웜의 비율이 높게 나왔는데, 픽셀로 보니 봄, 가을, 겨울이 많이 나옴"""

# Create a new figure
plt.figure()

# Add the first image to the left subplot
plt.subplot(1, 2, 1)  # Arguments are: nrows, ncols, index
plt.imshow(image_np)
plt.title('Original')

# Add the second image to the right subplot
plt.subplot(1, 2, 2)
plt.imshow(results)
plt.title('Pixel value')

# Display the plot
plt.show()

"""- 한 번 더 돌리니까 다르게 나옴. 시도할 때마다 조금씩 다르게 나오는 것 같다.

## 웜톤 전체 뽑기
"""

import os

# 파일 경로를 지정
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/웜톤_jpg/'

# 지정된 디렉토리 내의 모든 jpg 파일
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

for file in files:
    file_path = os.path.join(directory, file)

    image = Image.open(file_path).resize((224,224))
    image_np = np.array(image)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')
    results_distance = np.zeros_like(image_np, dtype='float')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls, dist = classify_skin_type(current_pixel)
            results[j, i] = color_map[cls]
            results_distance[j, i] = dist

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the first image to the left subplot
    ax[0].imshow(image_np)
    ax[0].set_title('Original')

    # Add the second image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel value')

    # Display the plot
    plt.show()



"""## 쿨톤 전체 뽑기"""

import os

# 파일 경로를 지정
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/쿨톤_jpg/'

# 지정된 디렉토리 내의 모든 jpg 파일
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

for file in files:
    file_path = os.path.join(directory, file)

    image = Image.open(file_path).resize((224,224))
    image_np = np.array(image)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')
    results_distance = np.zeros_like(image_np, dtype='float')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls, dist = classify_skin_type(current_pixel)
            results[j, i] = color_map[cls]
            results_distance[j, i] = dist

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the first image to the left subplot
    ax[0].imshow(image_np)
    ax[0].set_title('Original')

    # Add the second image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel value')

    # Display the plot
    plt.show()



"""## 일반인 데이터 확인"""

import os

# 파일 경로를 지정
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/train data/'

# 지정된 디렉토리 내의 모든 jpg 파일
files = [f for f in os.listdir(directory) if f.endswith('.JPG')]
files = files[:50] # 50개만 먼저 확인..하려했는데

for file in files:
    file_path = os.path.join(directory, file)

    image = Image.open(file_path).resize((224,224))
    image_np = np.array(image)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')
    results_distance = np.zeros_like(image_np, dtype='float')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls, dist = classify_skin_type(current_pixel)
            results[j, i] = color_map[cls]
            results_distance[j, i] = dist

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the first image to the left subplot
    ax[0].imshow(image_np)
    ax[0].set_title('Original')

    # Add the second image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel value')

    # Display the plot
    plt.show()

"""- 일반인 데이터는 코드가 안 돌아가서 뭐가 잘못됐는지 계속 확인했는데 확장자가 달랐다. 전에 라벨링 분류코드에서도 안 됐던 이유가 확장자 때문이었다는 것을 알 수 있었다.

# HSV 값을 이용한 픽셀 별 클래스 분류 확인

## 쿨톤 확인
"""

import os
import cv2

# Define the classification ranges
ranges = {
    'spring': {'H': range(20, 211), 'VS': 68.25, 'direction': 'above'},
    'summer': {'H': list(range(0, 21)) + list(range(210, 361)), 'VS': 68.75, 'direction': 'above'},
    'fall': {'H': range(20, 211), 'VS': 68.25, 'direction': 'below'},
    'winter': {'H': list(range(0, 21)) + list(range(210, 361)), 'VS': 68.75, 'direction': 'below'}
}

# Define a function for classification
def classify_hsv(pixel, ranges):
    h, s, v = pixel
    vs = v - s
    for cls, r in ranges.items():
        if h in r['H']:
            if (r['direction'] == 'above' and vs >= r['VS']) or (r['direction'] == 'below' and vs < r['VS']):
                return cls
    return 'undefined'

# Specify the file path
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/쿨톤_jpg/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2HSV)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls = classify_hsv(current_pixel, ranges)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(cv2.cvtColor(image_np, cv2.COLOR_HSV2RGB))
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

"""- RGB보다 HSV가 변환 뒤에 확인하는 것이라 그런 지 좀 더 오래 걸린다.
- 여름이 분류되는 건 너무 좋은데... 겨울이 안 나온다.😥

## 웜톤
"""

# Specify the file path
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/웜톤_jpg/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2HSV)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls = classify_hsv(current_pixel, ranges)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(cv2.cvtColor(image_np, cv2.COLOR_HSV2RGB))
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

"""- 아악.. 웜톤도 피부가 여름으로 도출된다.
- RGB와 HSV를 모두 이용해보자

# LAB 값으로 확인
"""

import os
import cv2
import numpy as np

# Define the classification criteria
criteria = {
    'warm': np.array([63.45, 11.80, 17.11]),
    'cool': np.array([64.80, 10.87, 15.04])
}

# Define a function for classification
def classify_lab(pixel, criteria):
    distances = {k: np.linalg.norm(pixel - v) for k, v in criteria.items()}
    return min(distances, key=distances.get)

# Specify the file path
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/웜톤_jpg/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

# Define the color map
color_map = {
    "warm": [0, 0, 0],
    "cool": [255, 255, 255]
}

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2Lab)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls = classify_lab(current_pixel, criteria)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(cv2.cvtColor(image_np, cv2.COLOR_Lab2RGB))
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

# Specify the file path
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/쿨톤_jpg/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

# Define the color map
color_map = {
    "warm": [0, 0, 0],
    "cool": [255, 255, 255]
}

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2Lab)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls = classify_lab(current_pixel, criteria)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(cv2.cvtColor(image_np, cv2.COLOR_Lab2RGB))
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

"""- LAB 값으로 시도하긴 했으나, OpenCV의 LAB값과 일반적인 LAB값은 다르다고 한다.
- 그럼 RGB값을 변환하는 방법으로 LAB값을 한 번 더 확인해보자.
"""

from skimage import color

warm_tone = [63.45, 11.80, 17.11]
cool_tone = [64.80, 10.87, 15.04]

tones = np.array([warm_tone, cool_tone])

# return: 'warm', 'cool'
def compute_cosine_sim(v1, v2):
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))


# vectorization
def classify_skin_type(pixel): # [216, 233, 243]
    pixel = color.rgb2lab(np.array([pixel])/255.0)  # Convert to LAB space
    similarities = np.array([compute_cosine_sim(pixel, tone) for tone in tones])

    _class = ['warm', 'cool'][np.argmax(similarities)]
    _distance = np.max(similarities)
    return _class,_distance

from tqdm import tqdm

results = np.zeros_like(image_np, dtype='uint8') # 0-255
results_distance = np.zeros_like(image_np, dtype='float') # 0-255

color_map = {
    "warm": [0, 0, 0],
    "cool": [255, 255, 255],
    "undefined": [0, 255, 255]
            }

for j in tqdm(range(height)):
    for i in range(width):
        current_pixel = image_np[j, i]
        cls, dist = classify_skin_type(current_pixel)
        results[j, i] = color_map[cls]
        results_distance[j, i] = dist

plt.imshow(results)

"""## 쿨톤"""

import os
from skimage import color

# Define the classification criteria
criteria = {
    'warm': np.array([63.45, 11.80, 17.11]),
    'cool': np.array([64.80, 10.87, 15.04])
}

# Function to compute cosine similarity
def compute_cosine_sim(v1, v2):
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))

# Function to classify skin type
def classify_skin_type(pixel):
    pixel = color.rgb2lab(np.array([pixel])/255.0) # Convert to LAB space
    similarities = np.array([compute_cosine_sim(pixel[0], tone) for tone in criteria.values()])

    _class = ['warm', 'cool'][np.argmax(similarities)]
    _distance = np.max(similarities)
    return _class, _distance

# Specify the file path
directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/쿨톤_jpg/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

# Define the color map
color_map = {
    "warm": [255, 0, 0],
    "cool": [0, 0, 255]
}

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = np.array(image)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls, dist = classify_skin_type(current_pixel)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(image_np)
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

"""## 웜톤"""

directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/prototype/웜톤_jpg/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.jpg')]

# Define the color map
color_map = {
    "warm": [255, 0, 0],
    "cool": [0, 0, 255]
}

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = np.array(image)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls, dist = classify_skin_type(current_pixel)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(image_np)
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

"""- LAB으로 하니 어느 정도 웜, 쿨 분류가 잘 되는 것 같다.
- 웜인데 쿨로 나오는 경우가 있지만 연예인 사진이다 보니 조명과 화장으로 인한 영향이라 생각된다.
- 프로젝트 초반에 LAB을 이용한 skin detection이 되지 않았던 이유는 openCV를 이용해서 그런 것 같다.

## 일반인 데이터
"""

directory = '/content/drive/MyDrive/Colab Notebooks/AIFFEL/Four_seasons/사계절_연예인 이미지 데이터셋/train data/'

# Get all jpg files in the specified directory
files = [f for f in os.listdir(directory) if f.endswith('.JPG')]

# Select only the first 50 files
files = files[:50]

# Define the color map
color_map = {
    "warm": [255, 0, 0],
    "cool": [0, 0, 255]
}

for file in files:
    file_path = os.path.join(directory, file)

    # Load and resize the image
    image = Image.open(file_path).resize((224, 224))
    image_np = np.array(image)

    height, width, _ = image_np.shape
    results = np.zeros_like(image_np, dtype='uint8')

    for j in tqdm(range(height)):
        for i in range(width):
            current_pixel = image_np[j, i]
            cls, dist = classify_skin_type(current_pixel)
            results[j, i] = color_map[cls]

    # Create a new figure
    fig, ax = plt.subplots(1, 2)

    # Add the original image to the left subplot
    ax[0].imshow(image_np)
    ax[0].set_title('Original')

    # Add the classified image to the right subplot
    ax[1].imshow(results)
    ax[1].set_title('Pixel Classification')

    # Display the plot
    plt.show()

"""# LAB + RGB"""



